{"ast":null,"code":"var _jsxFileName = \"/Users/carolinazerbes/Documents/Cursos/React/Quizzical/src/components/QuestionsPage.js\",\n    _s = $RefreshSig$();\n\nimport { type } from \"@testing-library/user-event/dist/type\";\nimport React from \"react\";\nimport Question from \"./Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuestionsPage(props) {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]);\n  const [questionsDB, setQuestionsDB] = React.useState([]); // const questionsDB = {}\n  // console.log(\"start\")\n\n  function updateQuestions(question) {\n    console.log(\"HERE1\");\n    console.log(question);\n    console.log(questions);\n    if (questions.length === 0) setQuestions([question]);else {\n      let newQuestion = questions;\n      newQuestion.push(question);\n      setQuestions(newQuestion);\n    }\n    console.log(\"HERE2\");\n    console.log(questions); // setQuestions(prevQuestions => {\n    //     console.log(\"HERE1\")\n    //     console.log(question)\n    //     console.log(prevQuestions)\n    //     if (questions.length==0){\n    //         console.log(\"FIRST\")\n    //         prevQuestions = [question]\n    //     } else{\n    //         console.log(\"ELSE\")\n    //         prevQuestions.push(question)\n    //     }\n    //         //Object.assign(prevQuestions, question)\n    //     console.log(\"HERE2\")\n    //     console.log(typeof(prevQuestions))\n    //     console.log(prevQuestions)\n    //     return {\n    //         prevQuestions\n    //     }\n    // })\n  }\n\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\").then(res => res.json()).then(data => setQuestionsDB(data.results));\n  }, [props.firstPage]);\n  let questionElements = \"\";\n  React.useEffect(() => {\n    if (questionsDB.length != 0) {\n      setQuestions([]);\n      console.log(\"HOW MANY TIMEEEEES\");\n      let questionUseEffect = [];\n      questionElements = questionsDB.map((question, index) => {\n        let answers = question.incorrect_answers;\n        answers = answers.filter(function (item, pos) {\n          return answers.indexOf(item) == pos;\n        });\n        answers = answers.filter(function (element) {\n          return element !== undefined;\n        });\n        !answers.includes(question.correct_answer) && answers.splice(Math.floor(Math.random() * 3), 0, question.correct_answer); // answers.splice(randomNumber, 0, question.correct_answer);\n\n        const finalAnswers = answers.map(answer => {\n          return answer.replace(/&lt;/g, \"<\").replace(/&Gt;/g, \">\").replace(/&#039;/g, \"'\").replace(/&amp;/g, \"\").replace(/&ouml;/g, \"o\").replace(/&quot;/g, \"\").replace(/&ldquo;/g, `\"`).replace(/&eacute;/g, `e`);\n        });\n        let finalQuestion = question.question;\n        finalQuestion.replace(/&lt;/g, \"<\").replace(/&Gt;/g, \">\").replace(/&#039;/g, \"\").replace(/&amp;/g, \"\").replace(/&ouml;/g, \"o\").replace(/&quot;/g, \"\").replace(/&ldquo;/g, `\"`).replace(/&eacute;/g, `e`);\n        let correct_answer = question.correct_answer;\n        correct_answer.replace(/&lt;/g, \"<\").replace(/&Gt;/g, \">\").replace(/&#039;/g, \"'\").replace(/&amp;/g, \"\").replace(/&ouml;/g, \"o\").replace(/&quot;/g, \"\").replace(/&ldquo;/g, `\"`).replace(/&eacute;/g, `e`);\n        let element = {\n          [index]: {\n            correct_answer: correct_answer,\n            answers: finalAnswers,\n            question: finalQuestion,\n            answer: \"\",\n            index: index\n          }\n        };\n        if (questionUseEffect.length === 0) questionUseEffect = element;else {\n          questionUseEffect.push(element);\n        } // console.log(\"ELEMENT\")\n        // console.log(element)\n        //updateQuestions(element)\n      });\n      setQuestions(questionUseEffect);\n      console.log(\"inside\");\n      console.log(questions);\n    }\n  }, [questionsDB]);\n  React.useEffect(() => {\n    return /*#__PURE__*/_jsxDEV(Question, {\n      element: question,\n      handleChange: handleChange // question={finalQuestion}\n      // answers={finalAnswers}\n\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this);\n  }, [questions]);\n\n  function handleChange(event, index) {// const {name, value} = event.target\n    // setQuestions(prevQuestions => {\n    //     prevQuestions[index] = {\n    //         ...prevQuestions[index],\n    //         [name] : value\n    //     }\n    //     return{\n    //         prevQuestions\n    //     }\n    // })\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-page\",\n    children: [questionElements, /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Check Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 9\n  }, this);\n}\n\n_s(QuestionsPage, \"UenSkvojrSBth5FuAZ7dGNc9UXw=\");\n\n_c = QuestionsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionsPage\");","map":{"version":3,"sources":["/Users/carolinazerbes/Documents/Cursos/React/Quizzical/src/components/QuestionsPage.js"],"names":["type","React","Question","QuestionsPage","props","questions","setQuestions","useState","questionsDB","setQuestionsDB","updateQuestions","question","console","log","length","newQuestion","push","useEffect","fetch","then","res","json","data","results","firstPage","questionElements","questionUseEffect","map","index","answers","incorrect_answers","filter","item","pos","indexOf","element","undefined","includes","correct_answer","splice","Math","floor","random","finalAnswers","answer","replace","finalQuestion","handleChange","event"],"mappings":"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","sourcesContent":["import { type } from \"@testing-library/user-event/dist/type\"\nimport React from \"react\"\nimport Question from \"./Question\"\n\nexport default function QuestionsPage(props){\n    const [questions, setQuestions] = React.useState([])\n    const [questionsDB, setQuestionsDB] = React.useState([])\n    \n    // const questionsDB = {}\n    // console.log(\"start\")\n    \n\n    function updateQuestions (question) {\n\n        console.log(\"HERE1\")\n        console.log(question)\n        console.log(questions)\n        if(questions.length === 0)\n            setQuestions([question])\n        else{\n            let newQuestion = questions\n            newQuestion.push(question)\n            setQuestions(newQuestion)\n        }\n\n        console.log(\"HERE2\")\n        console.log(questions)\n\n\n        // setQuestions(prevQuestions => {\n\n        //     console.log(\"HERE1\")\n        //     console.log(question)\n        //     console.log(prevQuestions)\n\n        //     if (questions.length==0){\n        //         console.log(\"FIRST\")\n        //         prevQuestions = [question]\n        //     } else{\n        //         console.log(\"ELSE\")\n        //         prevQuestions.push(question)\n        //     }\n\n        //         //Object.assign(prevQuestions, question)\n\n        //     console.log(\"HERE2\")\n        //     console.log(typeof(prevQuestions))\n        //     console.log(prevQuestions)\n\n        //     return {\n        //         prevQuestions\n        //     }\n        // })\n    }\n\n\n    React.useEffect(() => {\n        fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n            .then(res => res.json())\n            .then(data => setQuestionsDB(data.results)) \n    }, [props.firstPage])\n\n    let questionElements = \"\"\n\n    React.useEffect(() => {\n        \n        if(questionsDB.length != 0){\n            setQuestions([])\n            console.log(\"HOW MANY TIMEEEEES\")\n\n            let questionUseEffect = []\n\n            questionElements = questionsDB.map((question, index) =>{\n                \n                let answers = question.incorrect_answers\n                \n                answers = answers.filter(function(item, pos) {\n                    return answers.indexOf(item) == pos;\n                })\n                answers = answers.filter(function( element ) {\n                    return element !== undefined;\n                });\n\n                (!answers.includes(question.correct_answer) && answers.splice(Math.floor(Math.random() * 3), 0, question.correct_answer))\n                // answers.splice(randomNumber, 0, question.correct_answer);\n\n                const finalAnswers = answers.map(answer => {  \n                    return(\n                        answer.replace(/&lt;/g, \"<\")\n                            .replace(/&Gt;/g, \">\")\n                            .replace(/&#039;/g, \"'\")\n                            .replace(/&amp;/g, \"\")\n                            .replace(/&ouml;/g, \"o\")\n                            .replace(/&quot;/g, \"\")\n                            .replace(/&ldquo;/g, `\"`)\n                            .replace(/&eacute;/g, `e`)\n                            \n                            \n                    )\n                } )\n                let finalQuestion = question.question\n                finalQuestion.replace(/&lt;/g, \"<\")\n                    .replace(/&Gt;/g, \">\")\n                    .replace(/&#039;/g, \"\")\n                    .replace(/&amp;/g, \"\")\n                    .replace(/&ouml;/g, \"o\")\n                    .replace(/&quot;/g, \"\")\n                    .replace(/&ldquo;/g, `\"`)\n                    .replace(/&eacute;/g, `e`)\n\n                let correct_answer = question.correct_answer\n                correct_answer.replace(/&lt;/g, \"<\")\n                    .replace(/&Gt;/g, \">\")\n                    .replace(/&#039;/g, \"'\")\n                    .replace(/&amp;/g, \"\")\n                    .replace(/&ouml;/g, \"o\")\n                    .replace(/&quot;/g, \"\")\n                    .replace(/&ldquo;/g, `\"`)\n                    .replace(/&eacute;/g, `e`)\n                \n                let element = {\n                    [index] : {\n                        correct_answer : correct_answer,\n                        answers : finalAnswers,\n                        question : finalQuestion,\n                        answer : \"\",\n                        index : index\n                    }\n                }\n\n                if(questionUseEffect.length === 0)\n                    questionUseEffect = element\n                else{\n                    questionUseEffect.push(element)\n                }\n                // console.log(\"ELEMENT\")\n                // console.log(element)\n                \n                //updateQuestions(element)\n\n                \n            \n            })\n\n            \n\n            setQuestions(questionUseEffect)\n\n            console.log(\"inside\")\n            console.log(questions)\n        }\n\n    }, [questionsDB])\n\n    React.useEffect(() => {\n\n        return(\n            <Question \n                key={index}\n                element={question}\n                handleChange={handleChange}\n                // question={finalQuestion}\n                // answers={finalAnswers}\n\n            />\n        )\n    }, [questions])\n\n\n    function handleChange(event, index){\n        // const {name, value} = event.target\n        // setQuestions(prevQuestions => {\n        //     prevQuestions[index] = {\n        //         ...prevQuestions[index],\n        //         [name] : value\n        //     }\n        //     return{\n        //         prevQuestions\n        //     }\n        // })\n    }\n\n\n    return(\n        <div className=\"questions-page\">\n            {questionElements}\n            <button>Check Answers</button>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}