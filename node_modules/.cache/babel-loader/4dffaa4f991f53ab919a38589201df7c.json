{"ast":null,"code":"var _jsxFileName = \"/Users/carolinazerbes/Documents/Cursos/React/Quizzical/src/components/QuestionsPage.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Question from \"./Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuestionsPage(props) {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]);\n  const questionsDB = {};\n\n  function updateQuestions() {}\n\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\").then(res => res.json()).then(data => {\n      questionsDB = data.results;\n    });\n  }, [props.firstPage]);\n  console.log(questions);\n  const questionElements = questions.map((question, index) => {\n    let answers = question.incorrect_answers; // const randomNumber = Math.floor(Math.random() * 3)\n    // console.log(\"Answers\")\n    // console.log(answers)\n\n    answers = answers.filter(function (item, pos) {\n      return answers.indexOf(item) == pos;\n    });\n    answers = answers.filter(function (element) {\n      return element !== undefined;\n    });\n    !answers.includes(question.correct_answer) && answers.splice(Math.floor(Math.random() * 3), 0, question.correct_answer); // answers.splice(randomNumber, 0, question.correct_answer);\n    // console.log(answers)\n\n    const finalAnswers = answers.map(answer => {\n      return answer.replace(/&lt;/g, \"<\").replace(/&Gt;/g, \">\").replace(/&#039;/g, \"'\").replace(/&amp;/g, \"\").replace(/&ouml;/g, \"o\").replace(/&quot;/g, \"\").replace(/&ldquo;/g, `\"`).replace(/&eacute;/g, `e`);\n    });\n    let finalQuestion = question.question;\n    console.log(\"Question\");\n    console.log(finalQuestion);\n    finalQuestion.replace(/&lt;/g, \"<\").replace(/&Gt;/g, \">\").replace(/&#039;/g, \"\").replace(/&amp;/g, \"\").replace(/&ouml;/g, \"o\").replace(/&quot;/g, \"\").replace(/&ldquo;/g, `\"`).replace(/&eacute;/g, `e`);\n    console.log(finalQuestion);\n    return /*#__PURE__*/_jsxDEV(Question, {\n      question: finalQuestion,\n      answers: finalAnswers\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }); // function handleChange(event){\n  //     const {name, value} = event.target\n  //     setFormData(prevFormData => {\n  //         return{\n  //             ...prevFormData,\n  //             [name] : value\n  //         }\n  //     })\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-page\",\n    children: [questionElements, /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Check Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n\n_s(QuestionsPage, \"1ery3Y2F+nTWSbC27k3nmjCRtvo=\");\n\n_c = QuestionsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionsPage\");","map":{"version":3,"sources":["/Users/carolinazerbes/Documents/Cursos/React/Quizzical/src/components/QuestionsPage.js"],"names":["React","Question","QuestionsPage","props","questions","setQuestions","useState","questionsDB","updateQuestions","useEffect","fetch","then","res","json","data","results","firstPage","console","log","questionElements","map","question","index","answers","incorrect_answers","filter","item","pos","indexOf","element","undefined","includes","correct_answer","splice","Math","floor","random","finalAnswers","answer","replace","finalQuestion"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport Question from \"./Question\"\n\nexport default function QuestionsPage(props){\n    const [questions, setQuestions] = React.useState([])\n    \n    const questionsDB = {}\n\n    function updateQuestions () {\n\n    }\n\n    React.useEffect(() => {\n        fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n            .then(res => res.json())\n            .then(data => { questionsDB = data.results})\n    }, [props.firstPage])\n    \n    console.log(questions)\n    const questionElements = questions.map((question, index) =>{\n        let answers = question.incorrect_answers\n        // const randomNumber = Math.floor(Math.random() * 3)\n        // console.log(\"Answers\")\n        // console.log(answers)\n        answers = answers.filter(function(item, pos) {\n            return answers.indexOf(item) == pos;\n        })\n        answers = answers.filter(function( element ) {\n            return element !== undefined;\n         });\n\n        (!answers.includes(question.correct_answer) && answers.splice(Math.floor(Math.random() * 3), 0, question.correct_answer))\n        // answers.splice(randomNumber, 0, question.correct_answer);\n        // console.log(answers)\n        \n        \n        const finalAnswers = answers.map(answer => {\n            \n            return(\n                answer.replace(/&lt;/g, \"<\")\n                    .replace(/&Gt;/g, \">\")\n                    .replace(/&#039;/g, \"'\")\n                    .replace(/&amp;/g, \"\")\n                    .replace(/&ouml;/g, \"o\")\n                    .replace(/&quot;/g, \"\")\n                    .replace(/&ldquo;/g, `\"`)\n                    .replace(/&eacute;/g, `e`)\n                    \n                    \n            )\n        } )\n        let finalQuestion = question.question\n        console.log(\"Question\")\n        console.log(finalQuestion)\n        finalQuestion.replace(/&lt;/g, \"<\")\n            .replace(/&Gt;/g, \">\")\n            .replace(/&#039;/g, \"\")\n            .replace(/&amp;/g, \"\")\n            .replace(/&ouml;/g, \"o\")\n            .replace(/&quot;/g, \"\")\n            .replace(/&ldquo;/g, `\"`)\n            .replace(/&eacute;/g, `e`)\n\n        console.log(finalQuestion)\n        return(\n            <Question \n                key={index}\n                question={finalQuestion}\n                answers={finalAnswers}\n            />\n        )\n    })\n\n\n    // function handleChange(event){\n    //     const {name, value} = event.target\n    //     setFormData(prevFormData => {\n    //         return{\n    //             ...prevFormData,\n    //             [name] : value\n    //         }\n    //     })\n    // }\n\n\n    return(\n        <div className=\"questions-page\">\n            {questionElements}\n            <button>Check Answers</button>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}