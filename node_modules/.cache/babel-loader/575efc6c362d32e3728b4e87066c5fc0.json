{"ast":null,"code":"var _jsxFileName = \"/Users/carolinazerbes/Documents/Cursos/React/Quizzical/src/components/QuestionsPage.js\",\n    _s = $RefreshSig$();\n\nimport { type } from \"@testing-library/user-event/dist/type\";\nimport React from \"react\";\nimport Question from \"./Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuestionsPage(props) {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]);\n  const [questionsDB, setQuestionsDB] = React.useState([]); // const questionsDB = {}\n\n  function updateQuestions(question) {\n    setQuestions(prevQuestions => {\n      console.log(\"HERE1\");\n      console.log(typeof prevQuestions);\n      console.log(prevQuestions);\n      if (!prevQuestions) prevQuestions = question;else prevQuestions.push(question);\n      console.log(\"HERE2\");\n      console.log(typeof prevQuestions);\n      console.log(prevQuestions);\n      return {\n        prevQuestions\n      };\n    });\n  }\n\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\").then(res => res.json()).then(data => setQuestionsDB(data.results));\n    console.log(\"HIIII\");\n    console.log(questionsDB);\n  }, [props.firstPage]); // console.log(\"moi\")\n  // console.log(questionsDB)\n\n  const questionElements = questionsDB.map((question, index) => {\n    let answers = question.incorrect_answers; // const randomNumber = Math.floor(Math.random() * 3)\n    // console.log(\"Answers\")\n    // console.log(answers)\n\n    answers = answers.filter(function (item, pos) {\n      return answers.indexOf(item) == pos;\n    });\n    answers = answers.filter(function (element) {\n      return element !== undefined;\n    });\n    !answers.includes(question.correct_answer) && answers.splice(Math.floor(Math.random() * 3), 0, question.correct_answer); // answers.splice(randomNumber, 0, question.correct_answer);\n    // console.log(answers)\n\n    const finalAnswers = answers.map(answer => {\n      return answer.replace(/&lt;/g, \"<\").replace(/&Gt;/g, \">\").replace(/&#039;/g, \"'\").replace(/&amp;/g, \"\").replace(/&ouml;/g, \"o\").replace(/&quot;/g, \"\").replace(/&ldquo;/g, `\"`).replace(/&eacute;/g, `e`);\n    });\n    let finalQuestion = question.question;\n    console.log(\"Question\");\n    console.log(finalQuestion);\n    finalQuestion.replace(/&lt;/g, \"<\").replace(/&Gt;/g, \">\").replace(/&#039;/g, \"\").replace(/&amp;/g, \"\").replace(/&ouml;/g, \"o\").replace(/&quot;/g, \"\").replace(/&ldquo;/g, `\"`).replace(/&eacute;/g, `e`);\n    var element = {\n      correct_answer: question.correct_answer,\n      answers: finalAnswers,\n      question: finalQuestion,\n      answer: \"\",\n      index: index\n    };\n    console.loh(\"ELEMENT\");\n    console.log(element);\n    updateQuestions(element);\n    return /*#__PURE__*/_jsxDEV(Question, {\n      element: questions[index],\n      handleChange: handleChange // question={finalQuestion}\n      // answers={finalAnswers}\n\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this);\n  });\n\n  function handleChange(event, index) {\n    const {\n      name,\n      value\n    } = event.target;\n    setQuestions(prevQuestions => {\n      prevQuestions[index] = { ...prevQuestions[index],\n        [name]: value\n      };\n      return {\n        prevQuestions\n      };\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions-page\",\n    children: [questionElements, /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Check Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n}\n\n_s(QuestionsPage, \"CLtBUy5AvncKeeZGt8LZ8wJQCcI=\");\n\n_c = QuestionsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionsPage\");","map":{"version":3,"sources":["/Users/carolinazerbes/Documents/Cursos/React/Quizzical/src/components/QuestionsPage.js"],"names":["type","React","Question","QuestionsPage","props","questions","setQuestions","useState","questionsDB","setQuestionsDB","updateQuestions","question","prevQuestions","console","log","push","useEffect","fetch","then","res","json","data","results","firstPage","questionElements","map","index","answers","incorrect_answers","filter","item","pos","indexOf","element","undefined","includes","correct_answer","splice","Math","floor","random","finalAnswers","answer","replace","finalQuestion","loh","handleChange","event","name","value","target"],"mappings":"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","sourcesContent":["import { type } from \"@testing-library/user-event/dist/type\"\nimport React from \"react\"\nimport Question from \"./Question\"\n\nexport default function QuestionsPage(props){\n    const [questions, setQuestions] = React.useState([])\n    const [questionsDB, setQuestionsDB] = React.useState([])\n    \n    // const questionsDB = {}\n\n    function updateQuestions (question) {\n        setQuestions(prevQuestions => {\n\n            console.log(\"HERE1\")\n            console.log(typeof(prevQuestions))\n            console.log(prevQuestions)\n\n            if (!prevQuestions)\n                prevQuestions = question\n            else\n                prevQuestions.push(question)\n\n            console.log(\"HERE2\")\n            console.log(typeof(prevQuestions))\n            console.log(prevQuestions)\n\n            return {\n                prevQuestions\n            }\n        })\n    }\n\n    React.useEffect(() => {\n        fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n            .then(res => res.json())\n            .then(data => setQuestionsDB(data.results))\n\n        console.log(\"HIIII\")\n        console.log(questionsDB)\n    }, [props.firstPage])\n    \n    // console.log(\"moi\")\n    // console.log(questionsDB)\n    const questionElements = questionsDB.map((question, index) =>{\n        let answers = question.incorrect_answers\n        // const randomNumber = Math.floor(Math.random() * 3)\n        // console.log(\"Answers\")\n        // console.log(answers)\n        answers = answers.filter(function(item, pos) {\n            return answers.indexOf(item) == pos;\n        })\n        answers = answers.filter(function( element ) {\n            return element !== undefined;\n         });\n\n        (!answers.includes(question.correct_answer) && answers.splice(Math.floor(Math.random() * 3), 0, question.correct_answer))\n        // answers.splice(randomNumber, 0, question.correct_answer);\n        // console.log(answers)\n        \n        \n        const finalAnswers = answers.map(answer => {\n            \n            return(\n                answer.replace(/&lt;/g, \"<\")\n                    .replace(/&Gt;/g, \">\")\n                    .replace(/&#039;/g, \"'\")\n                    .replace(/&amp;/g, \"\")\n                    .replace(/&ouml;/g, \"o\")\n                    .replace(/&quot;/g, \"\")\n                    .replace(/&ldquo;/g, `\"`)\n                    .replace(/&eacute;/g, `e`)\n                    \n                    \n            )\n        } )\n        let finalQuestion = question.question\n        console.log(\"Question\")\n        console.log(finalQuestion)\n        finalQuestion.replace(/&lt;/g, \"<\")\n            .replace(/&Gt;/g, \">\")\n            .replace(/&#039;/g, \"\")\n            .replace(/&amp;/g, \"\")\n            .replace(/&ouml;/g, \"o\")\n            .replace(/&quot;/g, \"\")\n            .replace(/&ldquo;/g, `\"`)\n            .replace(/&eacute;/g, `e`)\n\n        \n        var element = {\n            correct_answer : question.correct_answer,\n            answers : finalAnswers,\n            question : finalQuestion,\n            answer : \"\",\n            index : index\n        }\n        console.loh(\"ELEMENT\")\n        console.log(element)\n        \n        updateQuestions(element)\n        return(\n            <Question \n                key={index}\n                element={questions[index]}\n                handleChange={handleChange}\n                // question={finalQuestion}\n                // answers={finalAnswers}\n\n            />\n        )\n    })\n\n\n    function handleChange(event, index){\n        const {name, value} = event.target\n        setQuestions(prevQuestions => {\n            prevQuestions[index] = {\n                ...prevQuestions[index],\n                [name] : value\n            }\n            return{\n                prevQuestions\n            }\n        })\n    }\n\n\n    return(\n        <div className=\"questions-page\">\n            {questionElements}\n            <button>Check Answers</button>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}