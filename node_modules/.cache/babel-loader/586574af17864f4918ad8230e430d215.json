{"ast":null,"code":"var _jsxFileName = \"/Users/carolinazerbes/Documents/Cursos/React/Quizzical/src/components/Main.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Question from \"./Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main(props) {\n  _s();\n\n  const [questions, setQuestions] = fetchQuestions();\n\n  function fetchQuestions() {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\").then(res => res.json()).then(data => setQuestions(data));\n    console.log;\n    return question;\n  }\n\n  const [allMemes, setAllMemes] = React.useState([]);\n  React.useEffect(async () => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(data => setAllMemes(data.data.memes));\n  }, []); //fetchQuestions()\n  // console.log(\"-- hi\")\n  // React.useEffect( () => function fetchQuestions(){\n  //     let question = fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\").then(res => res.json())\n  //         .then(data => console.log(data))\n  //     console.log(question)\n  //     console.log(\"hi\")\n  //     setQuestions(question)\n  // },[props.firstPage])\n\n  const questionElements = questions.localeCompare((question, index) => {\n    console.log(question);\n    return /*#__PURE__*/_jsxDEV(Question, { ...question\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: questionElements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Main, \"/DLZFwo4AvOc8XJmHFCpw6rs2Nw=\");\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/carolinazerbes/Documents/Cursos/React/Quizzical/src/components/Main.js"],"names":["React","Question","Main","props","questions","setQuestions","fetchQuestions","fetch","then","res","json","data","console","log","question","allMemes","setAllMemes","useState","useEffect","memes","questionElements","localeCompare","index"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAoB;AAAA;;AAC/B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA6BC,cAAc,EAAjD;;AAEA,WAASA,cAAT,GAAyB;AACrBC,IAAAA,KAAK,CAAC,oDAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,IAAI,IAAIN,YAAY,CAACM,IAAD,CAF9B;AAIAC,IAAAA,OAAO,CAACC,GAAR;AACA,WAAOC,QAAP;AACH;;AAED,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BhB,KAAK,CAACiB,QAAN,CAAe,EAAf,CAAhC;AAEAjB,EAAAA,KAAK,CAACkB,SAAN,CAAgB,YAAY;AACxBX,IAAAA,KAAK,CAAC,mCAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,IAAI,IAAIK,WAAW,CAACL,IAAI,CAACA,IAAL,CAAUQ,KAAX,CAF7B;AAGH,GAJD,EAIG,EAJH,EAd+B,CAqB/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,gBAAgB,GAAGhB,SAAS,CAACiB,aAAV,CAAwB,CAACP,QAAD,EAAWQ,KAAX,KAAoB;AACjEV,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACA,wBACI,QAAC,QAAD,OAEQA;AAFR,OACWQ,KADX;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH,GARwB,CAAzB;AASA,sBACI;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GA7CuBlB,I;;KAAAA,I","sourcesContent":["import React from 'react';\nimport Question from \"./Question\"\n\nexport default function Main(props){\n    const [questions, setQuestions] = (fetchQuestions())\n   \n    function fetchQuestions(){\n        fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n            .then(res => res.json())\n            .then(data => setQuestions(data))\n\n        console.log\n        return question\n    }\n\n    const [allMemes, setAllMemes] = React.useState([])\n    \n    React.useEffect(async () => {\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(res => res.json())\n            .then(data => setAllMemes(data.data.memes))\n    }, [])\n\n\n    //fetchQuestions()\n    // console.log(\"-- hi\")\n    // React.useEffect( () => function fetchQuestions(){\n    //     let question = fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\").then(res => res.json())\n    //         .then(data => console.log(data))\n    //     console.log(question)\n    //     console.log(\"hi\")\n    //     setQuestions(question)\n    // },[props.firstPage])\n\n    const questionElements = questions.localeCompare((question, index) =>{\n        console.log(question)\n        return(\n            <Question \n                key = {index}\n                {...question}\n            />\n        )\n    })\n    return(\n        <div>\n            {questionElements}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}